buildscript {
	dependencies {
		classpath 'org.flywaydb:flyway-database-postgresql:11.7.2'
	}
}

plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.flywaydb.flyway' version '11.7.2'
}

group = 'com.mvt'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	
	// OpenAPI/Swagger Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
	
	// Jackson Hibernate module para serialização de proxies LAZY
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate6'
	
	// JWT dependencies
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	
	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	// Payment SDKs
	implementation 'com.stripe:stripe-java:25.12.0'
	implementation 'com.mercadopago:sdk-java:2.1.27'
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'
}

tasks.named('test') {
	useJUnitPlatform()
}

// ============================================================================
// FLYWAY CONFIGURATION
// ============================================================================
flyway {
	// Database connection (usando as mesmas configurações do Spring)
	url = System.getenv('SPRING_DATASOURCE_URL') ?: 'jdbc:postgresql://localhost:5435/mvt-events'
	user = System.getenv('SPRING_DATASOURCE_USERNAME') ?: 'mvt'
	password = System.getenv('SPRING_DATASOURCE_PASSWORD') ?: 'mvtpass'
	
	// Migration settings
	locations = ['classpath:db/migration']
	baselineOnMigrate = true
	baselineVersion = '0'
	validateOnMigrate = true
	
	// PostgreSQL specific settings
	schemas = ['public']
	defaultSchema = 'public'
}
